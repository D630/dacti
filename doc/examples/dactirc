#!/usr/bin/env bash

term=stt
prompt=\>
DACTI_INDEX_FILE=${X_XDG_LIB_DIR}/dacti/dacti.index
DACTI_PRETEND=0

menu=(
        ADDRESSES
        BIN-ASC
        BIN-ATIME-ASC
        BIN-ATIME-DESC
        BIN-DESC
        CALC
        CLIP
        INSERT
        FILE
        KUNO
        PW
        RADIO
        TASK-ADD
        WEB
        WECKER
        Z
)

function Dacti::CmdMenuCustom
{
        builtin typeset prompt="$1"

        case $invocation_mode in
        cli)
                command /usr/local/bin/slmenu -b -f -i \
                        -p "$prompt" \
                        -nb "#002b36" \
                        -nf "#839496" \
                        -sb "#839496" \
                        -sf "#2C2C2C" \
                        -uc "#2C2C2C" \
                        -fn "-xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-iso10646-*";
        ;;
        gui)
                command /usr/local/bin/dmenu2 -b -f -i \
                        -l "10" \
                        -p "$prompt" \
                        -nb "#002b36" \
                        -nf "#839496" \
                        -sb "#839496" \
                        -sf "#2C2C2C" \
                        -uc "#2C2C2C" \
                        -fn "-xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-iso10646-*" \
                        -name "dacti" \
                        -class "dacti";
        esac
}

function Dacti::CmdMenuEmptyCustom
{
        builtin typeset prompt="$1"

        case $invocation_mode in
        cli)
                0<&- command /usr/local/bin/slmenu -b -f -i \
                        -p "$prompt" \
                        -nb "#002b36" \
                        -nf "#839496" \
                        -sb "#839496" \
                        -sf "#2C2C2C" \
                        -uc "#2C2C2C" \
                        -fn "-xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-iso10646-*";
        ;;
        gui)
                0<&- command /usr/local/bin/dmenu2 -b -f -i \
                        -l "10" \
                        -p "$prompt" \
                        -nb "#002b36" \
                        -nf "#839496" \
                        -sb "#839496" \
                        -sf "#2C2C2C" \
                        -uc "#2C2C2C" \
                        -fn "-xos4-terminus-medium-r-normal-*-18-*-*-*-*-*-iso10646-*" \
                        -name "dacti" \
                        -class "dacti";
        esac
}

function Dacti::ParseSelectionCustom
{
        builtin typeset selection="$@"

        case ${selection,,} in
        z)
                builtin exec z-fm.sh
        ;;
        clips)
                builtin exec clipbuffer.sh
        ;;
        web)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec furlview.sh "${HOME}/local/var/log/urls.log" 2>/dev/null
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" \
                                -c "furlview.sh ${HOME}/local/var/log/urls.log;read" 2>/dev/null
                fi
        ;;
        c-web)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec chromium-history.sh 2>/dev/null
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" -c "chromium-history.sh;read" 2>/dev/null
                fi
        ;;
        radio)
                builtin exec wradio.sh
        ;;
        pw)
                builtin exec pass-cp.sh
        ;;
        addresses)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec nottoomuch-wrapper.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e nottoomuch-wrapper.sh 2>/dev/null
                fi
        ;;
        task-add)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec taskwarrior-add.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" -c "taskwarrior-add.sh;read" 2>/dev/null
                fi
        ;;
        task-log)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec taskwarrior-log.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" -c "taskwarrior-log.sh;read" 2>/dev/null
                fi
        ;;
        kuno)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec kuno.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" -c "kuno.sh;read" 2>/dev/null
                fi
        ;;
        wecker)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec wakeup.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e "${SHELL:-sh}" -c "wakeup.sh;read" 2>/dev/null
                fi
        ;;
        calc)
                if
                        [[ $invocation_mode == cli ]]
                then
                        builtin exec calc.sh
                elif
                        [[ $invocation_mode == gui ]]
                then
                        builtin exec fork.sh ${term} -e calc.sh 2>/dev/null
                fi
        ;;
        *)
                builtin return 1
        esac
}

function Dacti::RaiseAppSgCustom
{
        ## dacti wants to raise a single window

        command wmctrl -i -a "${xids[0]}" || {
                launch_status=1
                builtin return 1
        }
}

function Dacti::RaiseAppPlCustom
{
        ## dacti has detected at least two windows to raise

        builtin typeset id

        for id
        do
                Dacti::RaiseAppSgCustom "$id" || {
                        launch_status=1
                        builtin return 1
                }
        done
}

# vim: set ts=8 sw=8 tw=0 et :
