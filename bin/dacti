#!/usr/bin/env bash
#
# Copyright 2014 -- 2019 D630
# https://github.com/D630/dacti

[[ ${BASH_SOURCE[0]} == "$0" ]] || {
	printf '%s: Do not execute me via source\n' "${BASH_SOURCE[0]}" 1>&2;
	return 1 2>/dev/null;
};

# -- FUNCTIONS.

function Dacti::CmdMenu
if
	declare -F Dacti::CmdMenuCustom 1>/dev/null 2>&1;
then
	Dacti::CmdMenuCustom "${1:-$prompt}";
else
	command -p dmenu -p "${1:-$prompt}";
fi;

function Dacti::CmdMenuEmpty
if
	declare -F Dacti::CmdMenuEmptyCustom 1>/dev/null 2>&1;
then
	Dacti::CmdMenuEmptyCustom "${1:-$prompt}";
else
	command -p dmenu -p "${1:-$prompt}" 0<&-;
fi;

function Dacti::ExecApp () (
	if
		declare -F Dacti::ExecAppCustom 1>/dev/null 2>&1;
	then
		Dacti::ExecAppCustom;
	else
		IFS=' ';
		case ${App[keep]}${App[nterminal]}${App[terminal]} in
			(nt)
				exec "$term" -e "${SHELL:-sh}" -c "${command[*]}" &;;
			(k)
				exec "${SHELL:-sh}" -c "${command[*]};printf 'Press ENTER to continue\n';read";;
			(knt)
				exec "$term" -e "${SHELL:-sh}" -c "${command[*]};'${SHELL:-sh}'" &;;
			(t)
				case $in_tty in
					(\?)
						exec "$term" -e "${SHELL:-sh}" -c "${command[*]}" &;;
					(*)
						exec "${command[@]}";;
				esac;;
			(kt)
				case $in_tty in
					(\?)
						exec "$term" -e "${SHELL:-sh}" -c "${command[*]};'${SHELL:-sh}'" &;;
					(*)
						exec "${SHELL:-sh}" -c "${command[*]};printf 'Press ENTER to continue\n';read";;
				esac;;
			('')
				case $in_tty in
					(\?)
						exec "${command[@]}" &;;
					(*)
						if
							[[ -n ${App[display]} ]];
						then
							exec "${command[@]}" &
						else
							exec "${command[@]}";
						fi;;
				esac;;
		esac;
	fi;
);

function Dacti::Main {
	case $1 in
		(-h|--help)
			Dacti::PrintHelp;
			exit 0;;
	esac;

	declare -x \
		DACTI_CONF_FILE \
		DACTI_INDEX_FILE;
	DACTI_CONF_FILE=${DACTI_CONF_FILE:-${XDG_CONFIG_HOME:-$HOME/.config}/dacti/dactirc};
	DACTI_INDEX_FILE=${DACTI_INDEX_FILE:-${XDG_DATA_HOME:-$HOME/.local/share}/dacti/dacti.index};

	printf -v DACTI_PRETEND '%d' "$DACTI_PRETEND" 2>/dev/null || {
		printf '%s: invalid number in: DACTI_PRETEND\n' "${BASH_SOURCE[0]}" 1>&2;
		return 1;
	};
	declare -xi "DACTI_PRETEND=$DACTI_PRETEND";

	declare +x \
		prompt \
		selection \
		term;
	prompt=\>;
	term=xterm;

	declare +x -a \
		apps \
		menu;
	menu=(
		BIN-ASC
		BIN-ATIME-ASC
		BIN-ATIME-DESC
		BIN-DESC
		INSERT
	);

	in_tty=$(command -p ps -p "$PPID" -o tty=);
	declare -r +x in_tty;

	if
		[[ -r $DACTI_CONF_FILE ]];
	then
		. "$DACTI_CONF_FILE";
	else
		command -p mkdir -p "${DACTI_CONF_FILE%/*}";
	fi;

	declare +x -A "DactiApps=()";
	if
		[[ -r $DACTI_INDEX_FILE ]];
	then
		function reg {
			DactiApps+=(
				[app $3]=${3:?}
				[status $3]=reg
				[class $3]=${2:?}
				[flags $3]=${1:?}
			);
			apps+=("$3");
		};
		function ign {
			DactiApps+=(
				[app $3]=${3:?}
				[status $3]=ign
				[class $3]=${2:?}
				[flags $3]=${1:?}
			);
			apps+=("$3");
		};
		declare -f +x +r \
			ign \
			reg;
		set -f;
		. "$DACTI_INDEX_FILE";
		set +f;
	else
		command -p mkdir -p "${DACTI_INDEX_FILE%/*}";
		> "$DACTI_INDEX_FILE";
	fi;

	while
		:;
	do
		selection=$(
			Dacti::PrintMenu0 |
			command -p sort -u |
			Dacti::CmdMenu;
		);
		case ${selection,,} in
			(\[bin-asc\])
				Dacti::ParseSelection "$(
					Dacti::PrintMenuBinAsc |
					Dacti::CmdMenu BIN-ASC;
				)";;
			(\[bin-atime-asc\])
				Dacti::ParseSelection "$(
					Dacti::PrintMenuBinAtimeAsc |
					Dacti::CmdMenu BIN-ATIME-ASC;
				)";;
			(\[bin-atime-desc\])
				Dacti::ParseSelection "$(
					Dacti::PrintMenuBinAtimeDesc |
					Dacti::CmdMenu BIN-ATIME-DESC;
				)";;
			(\[bin-desc\])
				Dacti::ParseSelection "$(
					Dacti::PrintMenuBinDesc |
					Dacti::CmdMenu BIN-DESC;
				)";;
			(\[insert\])
				Dacti::ParseSelection "$(Dacti::CmdMenuEmpty)";;
			(\[*\])
				declare -F Dacti::ParseSelectionCustom 1>/dev/null 2>&1 &&
					Dacti::ParseSelectionCustom "${selection//[\[\]]/}";;
			('')
				:;;
			(*)
				Dacti::ParseSelection "$selection";;
		esac;
		(($?)) ||
			return 0;
	done;
};

function Dacti::ParseSelection {
	[[ -n $* ]] ||
		return 1;

	declare +x \
		REPLY \
		pref_class;

	declare +x -i \
		pref_idx \
		pref_pretend \
		s;
	pref_idx=1;
	pref_pretend=$DACTI_PRETEND;
	s=0;

	declare +x -a command;
	IFS=$' \n\t' read -r -d '' -a command <<< $*;

	declare +x -A App;
	App=(
		[flags]=
		[keep]=
		[display]=
		[nterminal]=
		[terminal]=
		[status]=reg
	);

	if
		[[ $command == :* ]];
	then
		((${#command[@]} > 1)) || {
			printf '%s: Command missing: %s\n' "${BASH_SOURCE[0]}" "${command[*]}" 1>&2;
			return 1;
		};
		while
			read -r -n 1;
		do
			case $REPLY in
				(k)
					App[keep]=k;;
				(d)
					App[display]=d;;
				(i)
					App[status]=ign;;
				(n)
					App[terminal]=t;
					App[nterminal]=n;;
				(p)
					pref_pretend=1;;
				(t)
					App[terminal]=t;;
			esac;
		done <<< "${command#:}";
		unset -v command[0];
		command=("${command[@]}");
	else
		if
			[[ -v "DactiApps[app $command]" ]];
		then
			pref_idx=0;
			while
				read -r -n 1;
			do
				case $REPLY in
					(k)
						App[keep]=k;;
					(n)
						App[nterminal]=n;;
					(d)
						App[display]=d;;
					(t)
						App[terminal]=t;;
				esac;
			done <<< "${DactiApps[flags $command]}";
			App[status]=${DactiApps[status $command]};
			pref_class=${DactiApps[class $command]};
		fi;
	fi;

	command -v "$command" 1>/dev/null 2>&1 || {
		printf '%s: App is not an executable: %s\n' "${BASH_SOURCE[0]}" "$command" 1>&2;
		return 1
	}

	[[ -z $DISPLAY && -n ${App[display]} ]] && {
		printf '%s: App depends on DISPLAY: %s\n' "${BASH_SOURCE[0]}" "$command" 1>&2;
		return 1;
	};

	case ${App[status]} in
		(ign|reg)
			:;;
		(*)
			printf '%s: Unknown app status: %s\n' "${BASH_SOURCE[0]}" "${App[status]}" 1>&2;
			return 1;
	esac

	App[flags]=${App[display]}${App[keep]}${App[nterminal]}${App[terminal]};
	App[flags]=${App[flags]:--};

	if
		[[ -n $pref_class ]];
	then
		App[class]=$pref_class;
	elif
		[[ -z ${App[display]} ]];
	then
		App[class]=-;
	else
		declare +x c;
		c=${command[0]:0:1};
		App[class]=${command[0]}.${c^}${command[0]:1};
	fi;

	declare -r \
		App \
		command \
		pref_idx \
		pref_pretend;

	if
		[[ -z $DISPLAY || ${App[status]} == ign ]];
	then
		Dacti::ExecApp;
	else
		Dacti::RaiseApp;
	fi;

	s=$?;

	[[ $pref_idx$pref_pretend$s -eq 100 ]] &&
		printf '%s %s %s %s\n' \
			"${App[status]}" \
			"${App[flags]}" \
			"${App[class]}" \
			"$command" \
			>> "$DACTI_INDEX_FILE";

	return "$s";
};

function Dacti::PrintHelp {
	echo "$(</dev/fd/7)";
} 7<<'HELP'
Usage
	dacti [ -h | --help ]

Main selection menu: entries
	BIN-ASC							Browse executables within PATH. Sort
									them in ascending order by their names.
	BIN-DESC						" Sort them in descending order by their
									names.
	BIN-ATIME-ASC					" Sort them in ascending order by their
									access times.
	BIN-ATIME-DESC					" Sort them in descending order by their
									access times.
	INSERT							Open a menu with an empty list and insert
									a command.
	[:MODIFIERS ]COMMAND			Launch application (run or raise) from
									DACTI_INDEX_FILE.

Main selecton menu: modifiers
	i								Declare status 'ign'.
	k								Keep the process. Wait for a key press
									or spawn a new shell instance.
	d								COMMAND depends on DISPLAY.
	n								Run COMMAND in a new terminal emulator
									window.
	p								Launch COMMAND directly and create NO
									record.
									See also env variable DACTI_PRETEND.
	t								COMMAND needs a controlling tty.

Environment variables
	DACTI_CONF_FILE					See function Dacti::Main
	DACTI_INDEX_FILE				"
	DACTI_PRETEND					Default: 0

Configuration
	normal scalar variables
		in_tty						Output of: ps -p "$PPID" -o tty=
		prompt						Default: >
		term						Default: xterm
	indexed array variables
		apps						All app names from DACTI_INDEX_FILE.
		command						Selected/Typed command list without prefixed
									modifiers.
		menu						See entry section above.
	associative array variables
		App							Parsed preferences for COMMAND:
									<class>
									<display>
									<flags>
									<keep>
									<nterminal>
									<status>
									<terminal>
		DactiApps					Mapped entries from DACTI_INDEX_FILE:
									<app COMMAND>
									<class COMMAND>
									<flags COMMAND>
									<status COMMAND>
	functions
		Dacti::CmdMenuCustom		See doc/examples/dactirc
		Dacti::CmdMenuEmptyCustom	"
		Dacti::ExecAppCustom		"
		Dacti::ParseSelectionCustom "
		Dacti::RaiseAppCustom		"
HELP

function Dacti::PrintMenu0 {
	printf '[%s]\n' "${menu[@]}";
	printf '%s\n' "${apps[@]}";
};

function Dacti::PrintMenuBinAsc () (
	IFS=:;
	set -f;

	command -p stest -flx $PATH |
	command -p sort -u;
) 2>/dev/null;

function Dacti::PrintMenuBinAtimeAsc () (
	IFS=:;
	set -f;

	command -p find $PATH \( -type f -o -type l \) -printf '%A@\t%P\n' |
	command -p sort -n |
	command -p cut -f2 |
	command -p grep -F -xf <(command -p stest -flx $PATH) |
	command -p uniq;
) 2>/dev/null;

function Dacti::PrintMenuBinAtimeDesc () (
	IFS=:;
	set -f;

	command -p find $PATH \( -type f -o -type l \) -printf '%A@\t%P\n' |
	command -p sort -rn |
	command -p cut -f2 |
	command -p grep -F -xf <(command -p stest -flx $PATH) |
	command -p uniq;
) 2>/dev/null;

function Dacti::PrintMenuBinDesc () (
	IFS=:;
	set -f;

	command -p stest -flx $PATH |
	command -p sort -ru;
) 2>/dev/null;

function Dacti::RaiseApp
if
	declare -F Dacti::RaiseAppCustom 1>/dev/null 2>&1;
then
	Dacti::RaiseAppCustom;
else
	declare +x \
		class \
		i \
		pid \
		wm_pid \
		xid;
	declare +x -A pid_list;
	declare +x -a \
		stat \
		xids \
		xlist;

	IFS=', ' read -r -a xlist < <(
		command -p xprop -root -notype \
			-f _NET_CLIENT_LIST 32x ' $0+\n' _NET_CLIENT_LIST;
	);
	unset -v xlist[0];

	if
		[[ -n ${App[terminal]} ]];
	then
		while
			read -r pid;
		do
			until
				((pid == 1));
			do
				stat=($(<"/proc/$pid/stat"));
				pid=${stat[3]};
				pid_list[$pid]=1;
			done;
		done < <(command -p pgrep -x "$command");

		unset -v pid_list[1];

		for xid in "${xlist[@]}";
		do
			read -r _ _ wm_pid < <(command -p xprop -id "$xid" _NET_WM_PID)
			for ((i=${#pid_list[@]}; i > 0; i--));
			do
				if
					((pid_list[$wm_pid]));
				then
					xids+=("$xid");
					unset -v "pid_list[$wm_pid]";
					break;
				fi;
			done;
		done;
	else
		[[ ${App[class]} == - ]] ||
			for xid in "${xlist[@]}";
			do
				read -r _ _ class < <(command -p xprop -id "$xid" WM_CLASS);
				class=${class//\"/};
				[[ ${class/, /.} =~ ${App[class]} ]] &&
					xids+=("$xid");
			done;
	fi;
	case ${#xids[@]} in
		(0)
			Dacti::ExecApp;;
		(1)
			command -p wmctrl -i -a "$xids";;
		(*)
			for xid in "${xids[@]}";
			do
				command -p wmctrl -i -a "$xid" ||
					return "$?";
			done;
	esac;
fi;

# -- MAIN.

Dacti::Main "$@";

# vim: set ft=sh :
